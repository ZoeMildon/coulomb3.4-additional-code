function [output_args] = coulomb_3D(input_args)
%This function reads a .csv output file from Coulomb and plots the
%transferred stresses as a 3D plot. To be run from the coulomb34 folder.
%   Uses the patch function in Matlab, much quicker than waiting for 3D
%   plotting in Coulomb 3.4
%   
%   Before using this code - check the csv file. If it has "opt-rake and
%   opt-coul are found using grid search method of 0.1 deg increment" at
%   the bottom of the file, delete this before using this code.

% Written by Zoe Mildon in 2016, please reference using GitHub repository

% Change these values to draw  grid lines 
xmin=280;
xmax=470;
ymin=4580;
ymax=4810;
grid_interval=10;

element_size=1; % size of the fault elements used in Coulomb 

CST_limit=2; % to set the minimum and maximum values for the colour bar

% DO NOT CHANGE ANYTHING BELOW THIS LINE
figure
disp('Select the .csv file to plot')
[csv_filename,filepath]=uigetfile('*.csv');
if csv_filename==0
    disp('No .csv file selected')
else
    disp(csv_filename)
    data=readtable(csv_filename,'Delimiter',',','HeaderLines',2,'ReadVariableNames',false); %[filepath,csv_filename]
    %data=readtable([filepath,csv_filename],'Delimiter',' ');
    %data=data(~isnan(data));
    xcenter=table2array(data(:,2)); %2
    ycenter=table2array(data(:,3)); %3
    zcenter=table2array(data(:,4)); %4
    strike=table2array(data(:,6)); %6
    dip=table2array(data(:,7)); %7
    coulomb_stress=table2array(data(:,20)); %20
   
    xcenter=xcenter(~isnan(xcenter));
    ycenter=ycenter(~isnan(ycenter));
    zcenter=zcenter(~isnan(zcenter));
    strike=strike(~isnan(strike));
    dip=dip(~isnan(dip));
    coulomb_stress=coulomb_stress(~isnan(coulomb_stress));
    
grid_horz=element_size; % in km
grid_vert=zcenter(2)*2;

for i=1:length(xcenter)
    dx=0.5*(grid_vert/tand(dip(i)))*sind(strike(i)-90);
    dy=0.5*(grid_vert/tand(dip(i)))*cosd(strike(i)-90);
    delx=0.5*grid_horz*sind(180-strike(i));
    dely=0.5*grid_horz*cosd(180-strike(i));
    
    x(1,i)=xcenter(i)-delx+dx;
    x(2,i)=xcenter(i)-delx-dx;
    x(3,i)=xcenter(i)+delx-dx;
    x(4,i)=xcenter(i)+delx+dx;
    
    y(1,i)=ycenter(i)+dely+dy;
    y(2,i)=ycenter(i)+dely-dy;
    y(3,i)=ycenter(i)-dely-dy;
    y(4,i)=ycenter(i)-dely+dy;
    z(1,i)=-zcenter(i)+0.5*grid_vert;
    z(2,i)=-zcenter(i)-0.5*grid_vert;
    z(3,i)=-zcenter(i)-0.5*grid_vert;
    z(4,i)=-zcenter(i)+0.5*grid_vert;
end
p=patch(x,y,z,coulomb_stress);
whitebg([0.8 0.8 0.8]);
set(p,'EdgeColor','None');
view(3)
% STANDARD COULOMB COLOUR MAP
 colormap([0.211764708161354,0.152941182255745,0.992156863212585;0.213981240987778,0.187723785638809,0.992327392101288;0.216197788715363,0.222506403923035,0.992497861385346;0.218414321541786,0.257289022207260,0.992668390274048;0.220630869269371,0.292071610689163,0.992838859558106;0.222847402095795,0.326854228973389,0.993009388446808;0.225063949823380,0.361636847257614,0.993179857730866;0.227280482649803,0.396419435739517,0.993350386619568;0.229497015476227,0.431202054023743,0.993520915508270;0.231713563203812,0.465984672307968,0.993691384792328;0.233930096030235,0.500767290592194,0.993861913681030;0.236146643757820,0.535549879074097,0.994032382965088;0.238363176584244,0.570332467556000,0.994202911853790;0.240579724311829,0.605115115642548,0.994373381137848;0.242796257138252,0.639897704124451,0.994543910026550;0.245012804865837,0.674680292606354,0.994714379310608;0.247229337692261,0.709462940692902,0.994884908199310;0.249445870518684,0.744245529174805,0.995055437088013;0.251662403345108,0.779028117656708,0.995225906372070;0.253878951072693,0.813810765743256,0.995396435260773;0.256095498800278,0.848593354225159,0.995566904544830;0.258312046527863,0.883375942707062,0.995737433433533;0.260528564453125,0.918158590793610,0.995907902717590;0.262745112180710,0.952941179275513,0.996078431606293;0.354901969432831,0.958823561668396,0.996568620204926;0.447058826684952,0.964705884456635,0.997058808803558;0.539215683937073,0.970588207244873,0.997548997402191;0.631372570991516,0.976470589637756,0.998039245605469;0.723529398441315,0.982352972030640,0.998529434204102;0.815686285495758,0.988235294818878,0.999019622802734;0.907843112945557,0.994117617607117,0.999509811401367;1,1,1;1,1,1;0.999019622802734,0.992156863212585,0.913725495338440;0.998039245605469,0.984313726425171,0.827450990676880;0.997058808803558,0.976470589637756,0.741176486015320;0.996078431606293,0.968627452850342,0.654901981353760;0.995098054409027,0.960784316062927,0.568627476692200;0.994117617607117,0.952941179275513,0.482352942228317;0.993137240409851,0.945098042488098,0.396078437566757;0.992156863212585,0.937254905700684,0.309803932905197;0.989599347114563,0.896504700183868,0.299914747476578;0.987041771411896,0.855754494667053,0.290025591850281;0.984484255313873,0.815004289150238,0.280136406421661;0.981926679611206,0.774254024028778,0.270247250795364;0.979369163513184,0.733503818511963,0.260358065366745;0.976811587810516,0.692753612995148,0.250468879938126;0.974254071712494,0.652003407478333,0.240579724311829;0.971696496009827,0.611253201961517,0.230690538883209;0.969138979911804,0.570502996444702,0.220801368355751;0.966581404209137,0.529752790927887,0.210912197828293;0.964023888111115,0.489002555608749,0.201023027300835;0.961466312408447,0.448252350091934,0.191133856773376;0.958908796310425,0.407502144575119,0.181244671344757;0.956351220607758,0.366751909255981,0.171355500817299;0.953793704509735,0.326001703739166,0.161466330289841;0.951236128807068,0.285251498222351,0.151577159762383;0.948678612709045,0.244501277804375,0.141687989234924;0.946121037006378,0.203751072287560,0.131798803806305;0.943563520908356,0.163000851869583,0.121909640729427;0.941005945205689,0.122250638902187,0.112020462751389;0.938448429107666,0.0815004259347916,0.102131292223930;0.935890853404999,0.0407502129673958,0.0922421142458916;0.933333337306976,0,0.0823529437184334])

cb=colorbar('southoutside');
title(cb,'Coulomb stress transferred (bars)');
caxis([-CST_limit CST_limit])
xlabel('UTM x')
ylabel('UTM y')
zlabel('Depth (km)')
axis equal
hold on
%title(csv_filename)

% drawing grid lines 
for i=xmin:grid_interval:xmax
    line([i i],[ymin ymax],'Color','black')
end
for i=ymin:10:ymax
    line([xmin xmax],[i i],'Color','black')
end

end


